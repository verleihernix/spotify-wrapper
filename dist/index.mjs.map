{"version":3,"sources":["../src/wrapper.ts"],"sourcesContent":["import axios, { AxiosRequestConfig } from \"axios\";\r\nimport { stringify } from 'qs';\r\n\r\n/**\r\n * Interface for wrapper options.\r\n */\r\nexport interface WrapperOptions {\r\n    clientId: string;\r\n    clientSecret: string;\r\n}\r\n\r\n/**\r\n * Interface for a playlist.\r\n */\r\nexport interface Playlist {\r\n    id: string;\r\n    name: string;\r\n    tracks: {\r\n        items: Array<{ track: Track }>;\r\n    };\r\n}\r\n\r\n/**\r\n * Interface for a track.\r\n */\r\nexport interface Track {\r\n    id: string;\r\n    name: string;\r\n    artists: Array<{ name: string }>;\r\n}\r\n\r\n/**\r\n * Interface for an album.\r\n */\r\nexport interface Album {\r\n    id: string;\r\n    name: string;\r\n    artists: Array<{ name: string }>;\r\n    tracks: {\r\n        items: Track[];\r\n    }\r\n}\r\n\r\n/**\r\n * Interface for followers.\r\n */\r\nexport interface Followers {\r\n    total: number;\r\n}\r\n\r\n/**\r\n * Interface for an artist.\r\n */\r\nexport interface Artist {\r\n    id: string;\r\n    name: string;\r\n    genres: string[];\r\n    popularity: number;\r\n    followers: Followers;\r\n}\r\n\r\n/**\r\n * Interface for a user profile.\r\n */\r\nexport interface UserProfile {\r\n    id: string;\r\n    display_name: string;\r\n    followers: Followers;\r\n    images: Array<{ url: string }>;\r\n}\r\n\r\n/**\r\n * Interface for a paging object.\r\n */\r\nexport interface PagingObject<T> {\r\n  items: T[]\r\n}\r\n\r\n/**\r\n * Class to interact with the Spotify API.\r\n */\r\nexport class Wrapper {\r\n    private clientId: string;\r\n    private clientSecret: string;\r\n    private accessToken: string | null;\r\n\r\n    constructor(clientId: string, clientSecret: string) {\r\n      this.clientId = clientId;\r\n      this.clientSecret = clientSecret;\r\n      this.accessToken = null;\r\n    }\r\n\r\n    /**\r\n     * Authenticate with the Spotify API to obtain an access token.\r\n     */\r\n    private async authenticate(): Promise<void> {\r\n      const tokenUrl = 'https://accounts.spotify.com/api/token';\r\n      const data = stringify({ grant_type: 'client_credentials' });\r\n      const authOptions: AxiosRequestConfig = {\r\n        headers: {\r\n          'Authorization': `Basic ${Buffer.from(`${this.clientId}:${this.clientSecret}`).toString('base64')}`,\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        }\r\n      };\r\n\r\n      try {\r\n        const response = await axios.post(tokenUrl, data, authOptions);\r\n        this.accessToken = response.data.access_token;\r\n      } catch (error) {\r\n        console.error('Failed to authenticate with Spotify API', error);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Make a request to the Spotify API.\r\n     * @param url - The endpoint URL.\r\n     * @param params - Optional parameters for the request.\r\n     */\r\n    public async makeRequest<T>(url: string, params?: any): Promise<T | undefined> {\r\n      await this.authenticate();\r\n      const options: AxiosRequestConfig = {\r\n        headers: {\r\n          'Authorization': `Bearer ${this.accessToken}`\r\n        },\r\n        params: params\r\n      };\r\n\r\n      try {\r\n        const response = await axios.get<T>(url, options);\r\n        return response.data;\r\n      } catch (error) {\r\n        console.error(`Failed to fetch from Spotify API: ${url}`, error);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Get a playlist by its ID.\r\n     * @param playlistId - The ID of the playlist.\r\n     */\r\n    public async getPlaylist(playlistId: string): Promise<Playlist | undefined> {\r\n      return this.makeRequest<Playlist>(`https://api.spotify.com/v1/playlists/${playlistId}`);\r\n    }\r\n\r\n    /**\r\n     * Search for tracks.\r\n     * @param query - The search query.\r\n     */\r\n    public async searchTracks(query: string): Promise<Track[] | undefined> {\r\n      const data = await this.makeRequest<{ tracks: { items: Track[] } }>('https://api.spotify.com/v1/search', { q: query, type: 'track' });\r\n      return data?.tracks.items;\r\n    }\r\n\r\n    /**\r\n     * Get an album by its ID.\r\n     * @param albumId - The ID of the album.\r\n     */\r\n    public async getAlbum(albumId: string): Promise<Album | undefined> {\r\n      return this.makeRequest<Album>(`https://api.spotify.com/v1/albums/${albumId}`);\r\n    }\r\n\r\n    /**\r\n     * Get an artist by their ID.\r\n     * @param artistId - The ID of the artist.\r\n     */\r\n    public async getArtist(artistId: string): Promise<Artist | undefined> {\r\n      return this.makeRequest<Artist>(`https://api.spotify.com/v1/artists/${artistId}`);\r\n    }\r\n\r\n    /**\r\n     * Get a user profile by their ID.\r\n     * @param userId - The ID of the user.\r\n     */\r\n    public async getUserProfile(userId: string): Promise<UserProfile | undefined> {\r\n      return this.makeRequest<UserProfile>(`https://api.spotify.com/v1/users/${userId}`);\r\n    }\r\n\r\n    /**\r\n     * Get an artist's top tracks.\r\n     * @param artistId - The ID of the artist.\r\n     * @param market - The market (country code) for the tracks.\r\n     */\r\n    public async getArtistTopTracks(artistId: string, market: string): Promise<Track[] | undefined> {\r\n      const data = await this.makeRequest<{ tracks: Track[] }>(`https://api.spotify.com/v1/artists/${artistId}/top-tracks`, { market });\r\n      return data?.tracks;\r\n    }\r\n\r\n    /**\r\n     * Get albums by an artist.\r\n     * @param artistId - The ID of the artist.\r\n     */\r\n    public async getArtistAlbums(artistId: string): Promise<Album[] | undefined> {\r\n      const data = await this.makeRequest<PagingObject<Album>>(`https://api.spotify.com/v1/artists/${artistId}/albums`);\r\n      return data?.items;\r\n    }\r\n\r\n    /**\r\n     * Create a playlist for a user.\r\n     * @param userId - The ID of the user.\r\n     * @param name - The name of the playlist.\r\n     * @param description - The description of the playlist.\r\n     * @param publicStatus - The public status of the playlist.\r\n     */\r\n    public async createPlaylist(userId: string, name: string, description: string, publicStatus: boolean): Promise<Playlist | undefined> {\r\n      const url = `https://api.spotify.com/v1/users/${userId}/playlists`;\r\n      const options: AxiosRequestConfig = {\r\n        headers: {\r\n          'Authorization': `Bearer ${this.accessToken}`,\r\n          'Content-Type': 'application/json',\r\n        }\r\n      };\r\n      const data = {\r\n        name,\r\n        description,\r\n        public: publicStatus,\r\n      };\r\n\r\n      try {\r\n        const response = await axios.post<Playlist>(url, data, options);\r\n        return response.data;\r\n      } catch (error) {\r\n        console.error('Failed to create playlist', error);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Add tracks to a playlist.\r\n     * @param playlistId - The ID of the playlist.\r\n     * @param trackUris - The URIs of the tracks to add.\r\n     */\r\n    public async addTracksToPlaylist(playlistId: string, trackUris: string[]): Promise<void> {\r\n      const url = `https://api.spotify.com/v1/playlists/${playlistId}/tracks`;\r\n      const options: AxiosRequestConfig = {\r\n        headers: {\r\n          'Authorization': `Bearer ${this.accessToken}`,\r\n          'Content-Type': 'application/json',\r\n        }\r\n      };\r\n      const data = {\r\n        uris: trackUris,\r\n      };\r\n\r\n      try {\r\n        await axios.post(url, data, options);\r\n      } catch (error) {\r\n        console.error('Failed to add tracks to playlist', error);\r\n      }\r\n    }\r\n}\r\n\r\n/**\r\n * Class for analyzing track features.\r\n */\r\nexport class TrackAnalysis {\r\n    private wrapper: Wrapper;\r\n\r\n    constructor(wrapper: Wrapper) {\r\n        this.wrapper = wrapper;\r\n    }\r\n\r\n    /**\r\n     * Get audio features for a track.\r\n     * @param trackId - The ID of the track.\r\n     */\r\n    public async getTrackFeatures(trackId: string): Promise<any> {\r\n        const url = `https://api.spotify.com/v1/audio-features/${trackId}`;\r\n        return this.wrapper.makeRequest<any>(url);\r\n    }\r\n\r\n    /**\r\n     * Analyze a playlist to get features for each track.\r\n     * @param playlistId - The ID of the playlist.\r\n     */\r\n    public async analyzePlaylist(playlistId: string): Promise<any[] | undefined> {\r\n        const playlist = await this.wrapper.getPlaylist(playlistId);\r\n        if (!playlist) return;\r\n\r\n        const trackFeatures = await Promise.all(\r\n            playlist.tracks.items.map(item => this.getTrackFeatures(item.track.id))\r\n        );\r\n\r\n        return trackFeatures;\r\n    }\r\n}"],"mappings":"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","names":[]}